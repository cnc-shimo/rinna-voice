#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('rinna:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')(server);
var sqlite3 = require('sqlite3').verbose();
var twitter = require('twitter');
var settings = require('../settings');

var db = new sqlite3.Database('rinna.db');
var client = new twitter({
  consumer_key: settings.consumer_key,
  consumer_secret: settings.consumer_secret,
  access_token_key: settings.access_token_key,
  access_token_secret: settings.access_token_secret
});

io.on('connection', function(socket) {
  socket.on('me', function(data) {
    var text = '@ms_rinna ' + data.text;
    client.post('statuses/update', { status: text },  function(error, tweet, response) {
      socket.emit('me', tweet);
      socket.broadcast.emit('me', tweet);
    });
  });

	socket.on('rinna', function(data) {
    var tweet = {};
    db.serialize(function() {
      db.each('SELECT * FROM tweets WHERE in_reply_to_status_id_str = ' + data.id_str, function(err, row) {
        tweet = row;
      }, function(err, count) {
        if (count === 0) {
          tweet = {};
        }
        socket.emit('rinna', tweet);
        // socket.broadcast.emit('rinna', tweet);
      });
    });
	});
});

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
